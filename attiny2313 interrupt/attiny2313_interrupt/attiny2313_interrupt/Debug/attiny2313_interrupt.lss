
attiny2313_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000003fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089a  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000062d  00000000  00000000  00000d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f0  00000000  00000000  00001397  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d1  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ba  00000000  00000000  00001d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000231f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	28 c0       	rjmp	.+80     	; 0x52 <__ctors_end>
   2:	40 c0       	rjmp	.+128    	; 0x84 <__bad_interrupt>
   4:	3f c0       	rjmp	.+126    	; 0x84 <__bad_interrupt>
   6:	3e c0       	rjmp	.+124    	; 0x84 <__bad_interrupt>
   8:	3d c0       	rjmp	.+122    	; 0x84 <__bad_interrupt>
   a:	3c c0       	rjmp	.+120    	; 0x84 <__bad_interrupt>
   c:	3b c0       	rjmp	.+118    	; 0x84 <__bad_interrupt>
   e:	c4 c0       	rjmp	.+392    	; 0x198 <__vector_7>
  10:	39 c0       	rjmp	.+114    	; 0x84 <__bad_interrupt>
  12:	38 c0       	rjmp	.+112    	; 0x84 <__bad_interrupt>
  14:	37 c0       	rjmp	.+110    	; 0x84 <__bad_interrupt>
  16:	36 c0       	rjmp	.+108    	; 0x84 <__bad_interrupt>
  18:	35 c0       	rjmp	.+106    	; 0x84 <__bad_interrupt>
  1a:	34 c0       	rjmp	.+104    	; 0x84 <__bad_interrupt>
  1c:	33 c0       	rjmp	.+102    	; 0x84 <__bad_interrupt>
  1e:	32 c0       	rjmp	.+100    	; 0x84 <__bad_interrupt>
  20:	31 c0       	rjmp	.+98     	; 0x84 <__bad_interrupt>
  22:	30 c0       	rjmp	.+96     	; 0x84 <__bad_interrupt>
  24:	2f c0       	rjmp	.+94     	; 0x84 <__bad_interrupt>
  26:	2e c0       	rjmp	.+92     	; 0x84 <__bad_interrupt>
  28:	2d c0       	rjmp	.+90     	; 0x84 <__bad_interrupt>
  2a:	54 c0       	rjmp	.+168    	; 0xd4 <ind_dict+0x38>
  2c:	3f c0       	rjmp	.+126    	; 0xac <ind_dict+0x10>
  2e:	40 c0       	rjmp	.+128    	; 0xb0 <ind_dict+0x14>
  30:	41 c0       	rjmp	.+130    	; 0xb4 <ind_dict+0x18>
  32:	42 c0       	rjmp	.+132    	; 0xb8 <ind_dict+0x1c>
  34:	43 c0       	rjmp	.+134    	; 0xbc <ind_dict+0x20>
  36:	44 c0       	rjmp	.+136    	; 0xc0 <ind_dict+0x24>
  38:	45 c0       	rjmp	.+138    	; 0xc4 <ind_dict+0x28>
  3a:	46 c0       	rjmp	.+140    	; 0xc8 <ind_dict+0x2c>
  3c:	47 c0       	rjmp	.+142    	; 0xcc <ind_dict+0x30>
  3e:	fb c0       	rjmp	.+502    	; 0x236 <__vector_7+0x9e>
  40:	d9 c0       	rjmp	.+434    	; 0x1f4 <__vector_7+0x5c>
  42:	fc c0       	rjmp	.+504    	; 0x23c <__vector_7+0xa4>
  44:	da c0       	rjmp	.+436    	; 0x1fa <__vector_7+0x62>
  46:	dc c0       	rjmp	.+440    	; 0x200 <__vector_7+0x68>
  48:	de c0       	rjmp	.+444    	; 0x206 <__vector_7+0x6e>
  4a:	e0 c0       	rjmp	.+448    	; 0x20c <__vector_7+0x74>
  4c:	e2 c0       	rjmp	.+452    	; 0x212 <__vector_7+0x7a>
  4e:	e4 c0       	rjmp	.+456    	; 0x218 <__vector_7+0x80>
  50:	e6 c0       	rjmp	.+460    	; 0x21e <__vector_7+0x86>

00000052 <__ctors_end>:
  52:	11 24       	eor	r1, r1
  54:	1f be       	out	0x3f, r1	; 63
  56:	cf ed       	ldi	r28, 0xDF	; 223
  58:	cd bf       	out	0x3d, r28	; 61

0000005a <__do_copy_data>:
  5a:	10 e0       	ldi	r17, 0x00	; 0
  5c:	a0 e6       	ldi	r26, 0x60	; 96
  5e:	b0 e0       	ldi	r27, 0x00	; 0
  60:	ea e8       	ldi	r30, 0x8A	; 138
  62:	f3 e0       	ldi	r31, 0x03	; 3
  64:	02 c0       	rjmp	.+4      	; 0x6a <__do_copy_data+0x10>
  66:	05 90       	lpm	r0, Z+
  68:	0d 92       	st	X+, r0
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b1 07       	cpc	r27, r17
  6e:	d9 f7       	brne	.-10     	; 0x66 <__do_copy_data+0xc>

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a6 36       	cpi	r26, 0x66	; 102
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	17 d1       	rcall	.+558    	; 0x2b0 <main>
  82:	81 c1       	rjmp	.+770    	; 0x386 <_exit>

00000084 <__bad_interrupt>:
  84:	bd cf       	rjmp	.-134    	; 0x0 <__vectors>

00000086 <indicator_3461AS_init>:
void ind_dot_on(void);
void ind_dot_off(void);

void indicator_3461AS_init()
{
	port_cathode_dir |= (1<<seg1)|(1<<seg2)|(1<<seg3)|(1<<seg4); //Настраиваем пины катодов на выход
  86:	81 b3       	in	r24, 0x11	; 17
  88:	8c 63       	ori	r24, 0x3C	; 60
  8a:	81 bb       	out	0x11, r24	; 17
	port_anode_dir |= (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_e)|(1<<led_f)|(1<<led_g)|(1<<led_dp); //Настраиваем пины анодов на выход
  8c:	87 b3       	in	r24, 0x17	; 23
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	87 bb       	out	0x17, r24	; 23
	port_anode &= 0b00000000;
  92:	88 b3       	in	r24, 0x18	; 24
  94:	18 ba       	out	0x18, r1	; 24
	port_cathode &= 0b00000000;
  96:	82 b3       	in	r24, 0x12	; 18
  98:	12 ba       	out	0x12, r1	; 18
  9a:	08 95       	ret

0000009c <ind_dict>:
	port_cathode &= 0b00000000;
}

char ind_dict(char figure)
{
	switch (figure){
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	8a 30       	cpi	r24, 0x0A	; 10
  a0:	91 05       	cpc	r25, r1
  a2:	b0 f4       	brcc	.+44     	; 0xd0 <ind_dict+0x34>
  a4:	fc 01       	movw	r30, r24
  a6:	eb 5e       	subi	r30, 0xEB	; 235
  a8:	ff 4f       	sbci	r31, 0xFF	; 255
  aa:	09 94       	ijmp
		case 0: return (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_e)|(1<<led_f);
		case 1: return (1<<led_b)|(1<<led_c);
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	08 95       	ret
		case 2: return (1<<led_a)|(1<<led_b)|(1<<led_d)|(1<<led_e)|(1<<led_g);
  b0:	8b e5       	ldi	r24, 0x5B	; 91
  b2:	08 95       	ret
		case 3: return (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_g);
  b4:	8f e4       	ldi	r24, 0x4F	; 79
  b6:	08 95       	ret
		case 4: return (1<<led_b)|(1<<led_c)|(1<<led_f)|(1<<led_g);
  b8:	86 e6       	ldi	r24, 0x66	; 102
  ba:	08 95       	ret
		case 5: return (1<<led_a)|(1<<led_c)|(1<<led_d)|(1<<led_f)|(1<<led_g);
  bc:	8d e6       	ldi	r24, 0x6D	; 109
  be:	08 95       	ret
		case 6: return (1<<led_a)|(1<<led_c)|(1<<led_d)|(1<<led_e)|(1<<led_f)|(1<<led_g);
  c0:	8d e7       	ldi	r24, 0x7D	; 125
  c2:	08 95       	ret
		case 7: return (1<<led_a)|(1<<led_b)|(1<<led_c);
  c4:	87 e0       	ldi	r24, 0x07	; 7
  c6:	08 95       	ret
		case 8: return (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_e)|(1<<led_f)|(1<<led_g);
  c8:	8f e7       	ldi	r24, 0x7F	; 127
  ca:	08 95       	ret
		case 9: return (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_f)|(1<<led_g);
  cc:	8f e6       	ldi	r24, 0x6F	; 111
  ce:	08 95       	ret
		default: return 0;
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	08 95       	ret
}

char ind_dict(char figure)
{
	switch (figure){
		case 0: return (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_e)|(1<<led_f);
  d4:	8f e3       	ldi	r24, 0x3F	; 63
		case 7: return (1<<led_a)|(1<<led_b)|(1<<led_c);
		case 8: return (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_e)|(1<<led_f)|(1<<led_g);
		case 9: return (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_f)|(1<<led_g);
		default: return 0;
	}
}
  d6:	08 95       	ret

000000d8 <ind_print>:
	port_anode &= 0b00000000;
	port_cathode &= 0b00000000;
}

void ind_print(int number)
{
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	8c 01       	movw	r16, r24
	int fig1 = number / 1000;
	int fig2 = number / 100 % 10;
	int fig3 = number / 10 % 10;
	int fig4 = number % 10;
	
	port_anode |= ind_dict(fig1);
  e2:	68 ee       	ldi	r22, 0xE8	; 232
  e4:	73 e0       	ldi	r23, 0x03	; 3
  e6:	28 d1       	rcall	.+592    	; 0x338 <__divmodhi4>
  e8:	86 2f       	mov	r24, r22
  ea:	d8 df       	rcall	.-80     	; 0x9c <ind_dict>
  ec:	98 b3       	in	r25, 0x18	; 24
  ee:	89 2b       	or	r24, r25
  f0:	88 bb       	out	0x18, r24	; 24
	port_cathode |= (0<<seg1)|(1<<seg2)|(1<<seg3)|(1<<seg4);
  f2:	82 b3       	in	r24, 0x12	; 18
  f4:	8c 61       	ori	r24, 0x1C	; 28
  f6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	86 ea       	ldi	r24, 0xA6	; 166
  fa:	8a 95       	dec	r24
  fc:	f1 f7       	brne	.-4      	; 0xfa <__stack+0x1b>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <__stack+0x21>
	_delay_us(pause_us);
	port_anode &= 0b00000000;
 100:	88 b3       	in	r24, 0x18	; 24
 102:	18 ba       	out	0x18, r1	; 24
	port_cathode &= 0b00000000;
 104:	82 b3       	in	r24, 0x12	; 18
 106:	12 ba       	out	0x12, r1	; 18
	port_anode |= ind_dict(fig2);
 108:	c8 01       	movw	r24, r16
 10a:	64 e6       	ldi	r22, 0x64	; 100
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	14 d1       	rcall	.+552    	; 0x338 <__divmodhi4>
 110:	cb 01       	movw	r24, r22
 112:	ca e0       	ldi	r28, 0x0A	; 10
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	be 01       	movw	r22, r28
 118:	0f d1       	rcall	.+542    	; 0x338 <__divmodhi4>
 11a:	c0 df       	rcall	.-128    	; 0x9c <ind_dict>
 11c:	98 b3       	in	r25, 0x18	; 24
 11e:	89 2b       	or	r24, r25
 120:	88 bb       	out	0x18, r24	; 24
	port_cathode |= (1<<seg1)|(0<<seg2)|(1<<seg3)|(1<<seg4);
 122:	82 b3       	in	r24, 0x12	; 18
 124:	8c 62       	ori	r24, 0x2C	; 44
 126:	82 bb       	out	0x12, r24	; 18
 128:	86 ea       	ldi	r24, 0xA6	; 166
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <__stack+0x4b>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <__stack+0x51>
	_delay_us(pause_us);
	port_anode &= 0b00000000;
 130:	88 b3       	in	r24, 0x18	; 24
 132:	18 ba       	out	0x18, r1	; 24
	port_cathode &= 0b00000000;
 134:	82 b3       	in	r24, 0x12	; 18
 136:	12 ba       	out	0x12, r1	; 18
	port_anode |= ind_dict(fig3);
 138:	c8 01       	movw	r24, r16
 13a:	be 01       	movw	r22, r28
 13c:	fd d0       	rcall	.+506    	; 0x338 <__divmodhi4>
 13e:	18 2f       	mov	r17, r24
 140:	cb 01       	movw	r24, r22
 142:	be 01       	movw	r22, r28
 144:	f9 d0       	rcall	.+498    	; 0x338 <__divmodhi4>
 146:	aa df       	rcall	.-172    	; 0x9c <ind_dict>
 148:	98 b3       	in	r25, 0x18	; 24
 14a:	89 2b       	or	r24, r25
 14c:	88 bb       	out	0x18, r24	; 24
	port_cathode |= (1<<seg1)|(1<<seg2)|(0<<seg3)|(1<<seg4);
 14e:	82 b3       	in	r24, 0x12	; 18
 150:	84 63       	ori	r24, 0x34	; 52
 152:	82 bb       	out	0x12, r24	; 18
 154:	86 ea       	ldi	r24, 0xA6	; 166
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <__stack+0x77>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <__stack+0x7d>
	_delay_us(pause_us);
	port_anode &= 0b00000000;
 15c:	88 b3       	in	r24, 0x18	; 24
 15e:	18 ba       	out	0x18, r1	; 24
	port_cathode &= 0b00000000;
 160:	82 b3       	in	r24, 0x12	; 18
 162:	12 ba       	out	0x12, r1	; 18
	port_anode |= ind_dict(fig4);
 164:	81 2f       	mov	r24, r17
 166:	9a df       	rcall	.-204    	; 0x9c <ind_dict>
 168:	98 b3       	in	r25, 0x18	; 24
 16a:	89 2b       	or	r24, r25
 16c:	88 bb       	out	0x18, r24	; 24
	port_cathode |= (1<<seg1)|(1<<seg2)|(1<<seg3)|(0<<seg4);
 16e:	82 b3       	in	r24, 0x12	; 18
 170:	88 63       	ori	r24, 0x38	; 56
 172:	82 bb       	out	0x12, r24	; 18
 174:	86 ea       	ldi	r24, 0xA6	; 166
 176:	8a 95       	dec	r24
 178:	f1 f7       	brne	.-4      	; 0x176 <__stack+0x97>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <__stack+0x9d>
	_delay_us(pause_us);
	port_anode &= 0b00000000;
 17c:	88 b3       	in	r24, 0x18	; 24
 17e:	18 ba       	out	0x18, r1	; 24
	port_cathode &= 0b00000000;
 180:	82 b3       	in	r24, 0x12	; 18
 182:	12 ba       	out	0x12, r1	; 18
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	08 95       	ret

0000018e <ind_dot_on>:
		default: return 0;
	}
}

void ind_dot_on(void){
	port_anode |= (1<<led_dp);
 18e:	c7 9a       	sbi	0x18, 7	; 24
 190:	08 95       	ret

00000192 <ind_dot_off>:
}

void ind_dot_off(void){
	port_anode |= (0<<led_dp);
 192:	88 b3       	in	r24, 0x18	; 24
 194:	88 bb       	out	0x18, r24	; 24
 196:	08 95       	ret

00000198 <__vector_7>:
			ind_dot_off();
		}
    }
}

ISR(USART0_RX_vect){
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	2f 93       	push	r18
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	int buf = UDR;
 1b8:	2c b1       	in	r18, 0x0c	; 12
	int fig = -1;
	static int flag = 0;
	if(flag == 1){
 1ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1be:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	41 f4       	brne	.+16     	; 0x1d6 <__vector_7+0x3e>
		val = 0;
 1c6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <val+0x1>
 1ca:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <val>
		flag = 0;
 1ce:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1d2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	if ((buf > 47)&&(buf<58)){
 1d6:	82 2f       	mov	r24, r18
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	c0 97       	sbiw	r24, 0x30	; 48
 1dc:	0a 97       	sbiw	r24, 0x0a	; 10
 1de:	10 f5       	brcc	.+68     	; 0x224 <__vector_7+0x8c>
		switch(buf)
 1e0:	82 2f       	mov	r24, r18
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	fc 01       	movw	r30, r24
 1e6:	f0 97       	sbiw	r30, 0x30	; 48
 1e8:	ea 30       	cpi	r30, 0x0A	; 10
 1ea:	f1 05       	cpc	r31, r1
 1ec:	d8 f4       	brcc	.+54     	; 0x224 <__vector_7+0x8c>
 1ee:	e1 5e       	subi	r30, 0xE1	; 225
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	09 94       	ijmp
		{
			case 48:
				fig = 0;
				break;
			case 49:
				fig = 1;
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	23 c0       	rjmp	.+70     	; 0x240 <__vector_7+0xa8>
				break;
			case 50:
				fig = 2;
				break;
			case 51:
				fig = 3;
 1fa:	43 e0       	ldi	r20, 0x03	; 3
 1fc:	50 e0       	ldi	r21, 0x00	; 0
				break;
 1fe:	20 c0       	rjmp	.+64     	; 0x240 <__vector_7+0xa8>
			case 52:
				fig = 4;
 200:	44 e0       	ldi	r20, 0x04	; 4
 202:	50 e0       	ldi	r21, 0x00	; 0
				break;
 204:	1d c0       	rjmp	.+58     	; 0x240 <__vector_7+0xa8>
			case 53:
				fig = 5;
 206:	45 e0       	ldi	r20, 0x05	; 5
 208:	50 e0       	ldi	r21, 0x00	; 0
				break;
 20a:	1a c0       	rjmp	.+52     	; 0x240 <__vector_7+0xa8>
			case 54:
				fig = 6;
 20c:	46 e0       	ldi	r20, 0x06	; 6
 20e:	50 e0       	ldi	r21, 0x00	; 0
				break;
 210:	17 c0       	rjmp	.+46     	; 0x240 <__vector_7+0xa8>
			case 55:
				fig = 7;
 212:	47 e0       	ldi	r20, 0x07	; 7
 214:	50 e0       	ldi	r21, 0x00	; 0
				break;
 216:	14 c0       	rjmp	.+40     	; 0x240 <__vector_7+0xa8>
			case 56:
				fig = 8;
 218:	48 e0       	ldi	r20, 0x08	; 8
 21a:	50 e0       	ldi	r21, 0x00	; 0
				break;
 21c:	11 c0       	rjmp	.+34     	; 0x240 <__vector_7+0xa8>
			case 57:
				fig = 9;
 21e:	49 e0       	ldi	r20, 0x09	; 9
 220:	50 e0       	ldi	r21, 0x00	; 0
				break;
 222:	0e c0       	rjmp	.+28     	; 0x240 <__vector_7+0xa8>
		}
	}
	if (fig != -1){
		val = val*10 + fig;
	}
	if(buf == 10){
 224:	2a 30       	cpi	r18, 0x0A	; 10
 226:	01 f5       	brne	.+64     	; 0x268 <__vector_7+0xd0>
		flag = 1;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 230:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 234:	19 c0       	rjmp	.+50     	; 0x268 <__vector_7+0xd0>
	}
	if ((buf > 47)&&(buf<58)){
		switch(buf)
		{
			case 48:
				fig = 0;
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <__vector_7+0xa8>
				break;
			case 49:
				fig = 1;
				break;
			case 50:
				fig = 2;
 23c:	42 e0       	ldi	r20, 0x02	; 2
 23e:	50 e0       	ldi	r21, 0x00	; 0
				fig = 9;
				break;
		}
	}
	if (fig != -1){
		val = val*10 + fig;
 240:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <val>
 244:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <val+0x1>
 248:	bc 01       	movw	r22, r24
 24a:	66 0f       	add	r22, r22
 24c:	77 1f       	adc	r23, r23
 24e:	66 0f       	add	r22, r22
 250:	77 1f       	adc	r23, r23
 252:	86 0f       	add	r24, r22
 254:	97 1f       	adc	r25, r23
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	84 0f       	add	r24, r20
 25c:	95 1f       	adc	r25, r21
 25e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <val+0x1>
 262:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <val>
 266:	de cf       	rjmp	.-68     	; 0x224 <__vector_7+0x8c>
	}
	if(buf == 10){
		flag = 1;
	}
}
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	7f 91       	pop	r23
 276:	6f 91       	pop	r22
 278:	5f 91       	pop	r21
 27a:	4f 91       	pop	r20
 27c:	2f 91       	pop	r18
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <uart_init>:

void uart_init(void){
	/* Set baud rate */
	UBRRL = 12;
 288:	8c e0       	ldi	r24, 0x0C	; 12
 28a:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X);
 28c:	59 9a       	sbi	0x0b, 1	; 11
	/* Enable receiver and transmitter */
	UCSRB |= (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 28e:	8a b1       	in	r24, 0x0a	; 10
 290:	88 69       	ori	r24, 0x98	; 152
 292:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<USBS);
 294:	1b 9a       	sbi	0x03, 3	; 3
 296:	08 95       	ret

00000298 <uart_send>:
}

void uart_send(char* str)
{
 298:	fc 01       	movw	r30, r24
	int i = 0;
	while(str[i]){
 29a:	90 81       	ld	r25, Z
 29c:	99 23       	and	r25, r25
 29e:	39 f0       	breq	.+14     	; 0x2ae <uart_send+0x16>
 2a0:	31 96       	adiw	r30, 0x01	; 1
		/* Wait for empty transmit buffer */
		while ( !( UCSRA & (1<<UDRE)) );
 2a2:	5d 9b       	sbis	0x0b, 5	; 11
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <uart_send+0xa>
		/* Put data into buffer, sends the data */
		UDR = str[i];
 2a6:	9c b9       	out	0x0c, r25	; 12
}

void uart_send(char* str)
{
	int i = 0;
	while(str[i]){
 2a8:	91 91       	ld	r25, Z+
 2aa:	91 11       	cpse	r25, r1
 2ac:	fa cf       	rjmp	.-12     	; 0x2a2 <uart_send+0xa>
 2ae:	08 95       	ret

000002b0 <main>:

volatile int val = 0;
char tx_buffer[] = "asdasdasd";

int main(void)
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	1f 92       	push	r1
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	dd 27       	eor	r29, r29
	indicator_3461AS_init();
 2ba:	e5 de       	rcall	.-566    	; 0x86 <indicator_3461AS_init>
	uart_init();
 2bc:	e5 df       	rcall	.-54     	; 0x288 <uart_init>
	sei();
 2be:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		static int dot_flag = 0;
		if(val == 105){
			dot_flag = 1;
 2c0:	01 e0       	ldi	r16, 0x01	; 1
 2c2:	10 e0       	ldi	r17, 0x00	; 0
	sei();
    /* Replace with your application code */
    while (1) 
    {
		static int dot_flag = 0;
		if(val == 105){
 2c4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <val>
 2c8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <val+0x1>
 2cc:	89 36       	cpi	r24, 0x69	; 105
 2ce:	91 05       	cpc	r25, r1
 2d0:	21 f4       	brne	.+8      	; 0x2da <main+0x2a>
			dot_flag = 1;
 2d2:	10 93 63 00 	sts	0x0063, r17	; 0x800063 <dot_flag.1776+0x1>
 2d6:	00 93 62 00 	sts	0x0062, r16	; 0x800062 <dot_flag.1776>
		}
		if (val == 106)
 2da:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <val>
 2de:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <val+0x1>
 2e2:	8a 36       	cpi	r24, 0x6A	; 106
 2e4:	91 05       	cpc	r25, r1
 2e6:	21 f4       	brne	.+8      	; 0x2f0 <main+0x40>
		{
			dot_flag = 0;
 2e8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <dot_flag.1776+0x1>
 2ec:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <dot_flag.1776>
		}
		if (val == 44)
 2f0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <val>
 2f4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <val+0x1>
 2f8:	8c 97       	sbiw	r24, 0x2c	; 44
 2fa:	79 f4       	brne	.+30     	; 0x31a <main+0x6a>
		{
			char text[1];
			text[0] = DDRB;
 2fc:	87 b3       	in	r24, 0x17	; 23
 2fe:	89 83       	std	Y+1, r24	; 0x01
			uart_send(text);
 300:	ce 01       	movw	r24, r28
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	c9 df       	rcall	.-110    	; 0x298 <uart_send>
			val = DDRB;
 306:	87 b3       	in	r24, 0x17	; 23
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <val+0x1>
 30e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <val>
			dot_flag = 1;
 312:	10 93 63 00 	sts	0x0063, r17	; 0x800063 <dot_flag.1776+0x1>
 316:	00 93 62 00 	sts	0x0062, r16	; 0x800062 <dot_flag.1776>
		}
		ind_print(val);
 31a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <val>
 31e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <val+0x1>
 322:	da de       	rcall	.-588    	; 0xd8 <ind_print>
		if(dot_flag){
 324:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <dot_flag.1776>
 328:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <dot_flag.1776+0x1>
 32c:	89 2b       	or	r24, r25
 32e:	11 f0       	breq	.+4      	; 0x334 <main+0x84>
			ind_dot_on();
 330:	2e df       	rcall	.-420    	; 0x18e <ind_dot_on>
 332:	c8 cf       	rjmp	.-112    	; 0x2c4 <main+0x14>
		}
		else{
			ind_dot_off();
 334:	2e df       	rcall	.-420    	; 0x192 <ind_dot_off>
 336:	c6 cf       	rjmp	.-116    	; 0x2c4 <main+0x14>

00000338 <__divmodhi4>:
 338:	97 fb       	bst	r25, 7
 33a:	07 2e       	mov	r0, r23
 33c:	16 f4       	brtc	.+4      	; 0x342 <__divmodhi4+0xa>
 33e:	00 94       	com	r0
 340:	06 d0       	rcall	.+12     	; 0x34e <__divmodhi4_neg1>
 342:	77 fd       	sbrc	r23, 7
 344:	08 d0       	rcall	.+16     	; 0x356 <__divmodhi4_neg2>
 346:	0b d0       	rcall	.+22     	; 0x35e <__udivmodhi4>
 348:	07 fc       	sbrc	r0, 7
 34a:	05 d0       	rcall	.+10     	; 0x356 <__divmodhi4_neg2>
 34c:	3e f4       	brtc	.+14     	; 0x35c <__divmodhi4_exit>

0000034e <__divmodhi4_neg1>:
 34e:	90 95       	com	r25
 350:	81 95       	neg	r24
 352:	9f 4f       	sbci	r25, 0xFF	; 255
 354:	08 95       	ret

00000356 <__divmodhi4_neg2>:
 356:	70 95       	com	r23
 358:	61 95       	neg	r22
 35a:	7f 4f       	sbci	r23, 0xFF	; 255

0000035c <__divmodhi4_exit>:
 35c:	08 95       	ret

0000035e <__udivmodhi4>:
 35e:	aa 1b       	sub	r26, r26
 360:	bb 1b       	sub	r27, r27
 362:	51 e1       	ldi	r21, 0x11	; 17
 364:	07 c0       	rjmp	.+14     	; 0x374 <__udivmodhi4_ep>

00000366 <__udivmodhi4_loop>:
 366:	aa 1f       	adc	r26, r26
 368:	bb 1f       	adc	r27, r27
 36a:	a6 17       	cp	r26, r22
 36c:	b7 07       	cpc	r27, r23
 36e:	10 f0       	brcs	.+4      	; 0x374 <__udivmodhi4_ep>
 370:	a6 1b       	sub	r26, r22
 372:	b7 0b       	sbc	r27, r23

00000374 <__udivmodhi4_ep>:
 374:	88 1f       	adc	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	5a 95       	dec	r21
 37a:	a9 f7       	brne	.-22     	; 0x366 <__udivmodhi4_loop>
 37c:	80 95       	com	r24
 37e:	90 95       	com	r25
 380:	bc 01       	movw	r22, r24
 382:	cd 01       	movw	r24, r26
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
