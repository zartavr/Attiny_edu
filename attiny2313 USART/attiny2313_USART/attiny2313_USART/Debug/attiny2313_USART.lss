
attiny2313_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000068  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000000ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078d  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e3  00000000  00000000  00000909  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d6  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f4  00000000  00000000  000016f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001ae9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>
  26:	07 c0       	rjmp	.+14     	; 0x36 <__bad_interrupt>
  28:	06 c0       	rjmp	.+12     	; 0x36 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61
  32:	14 d0       	rcall	.+40     	; 0x5c <main>
  34:	17 c0       	rjmp	.+46     	; 0x64 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <uart_init>:
	}
}

void uart_init(void){
	/* Set baud rate */
	UBRRL = 12;
  38:	8c e0       	ldi	r24, 0x0C	; 12
  3a:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X);
  3c:	59 9a       	sbi	0x0b, 1	; 11
	/* Enable receiver and transmitter */
	UCSRB |= (1<<RXEN)|(1<<TXEN);
  3e:	8a b1       	in	r24, 0x0a	; 10
  40:	88 61       	ori	r24, 0x18	; 24
  42:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<USBS)|(3<<UCSZ0)|(1<<UPM1);
  44:	83 b1       	in	r24, 0x03	; 3
  46:	8e 62       	ori	r24, 0x2E	; 46
  48:	83 b9       	out	0x03, r24	; 3
  4a:	08 95       	ret

0000004c <uart_send>:
}

void uart_send(unsigned char data )
{
	/* Wait for empty transmit buffer */
	while (!( UCSRA & (1<<UDRE)) );
  4c:	5d 9b       	sbis	0x0b, 5	; 11
  4e:	fe cf       	rjmp	.-4      	; 0x4c <uart_send>
	/* Put data into buffer, sends the data */
	UDR = data;
  50:	8c b9       	out	0x0c, r24	; 12
  52:	08 95       	ret

00000054 <uart_receive>:
}

unsigned char uart_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
  54:	5f 9b       	sbis	0x0b, 7	; 11
  56:	fe cf       	rjmp	.-4      	; 0x54 <uart_receive>
	/* Get and return received data from buffer */
	return UDR;
  58:	8c b1       	in	r24, 0x0c	; 12
}
  5a:	08 95       	ret

0000005c <main>:
void uart_send(unsigned char data );
unsigned char uart_receive(void);

int main(void)
{
    uart_init();
  5c:	ed df       	rcall	.-38     	; 0x38 <uart_init>
    while (1) 
    {
		char asdd = uart_receive();
  5e:	fa df       	rcall	.-12     	; 0x54 <uart_receive>
		uart_send(asdd);
  60:	f5 df       	rcall	.-22     	; 0x4c <uart_send>
  62:	fd cf       	rjmp	.-6      	; 0x5e <main+0x2>

00000064 <_exit>:
  64:	f8 94       	cli

00000066 <__stop_program>:
  66:	ff cf       	rjmp	.-2      	; 0x66 <__stop_program>
