
attiny2313 encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000770  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000595  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000414  00000000  00000000  0000105d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000048d  00000000  00000000  0000186b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1e c0       	rjmp	.+60     	; 0x3e <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>
  2a:	37 c0       	rjmp	.+110    	; 0x9a <ind_dict+0x38>
  2c:	22 c0       	rjmp	.+68     	; 0x72 <ind_dict+0x10>
  2e:	23 c0       	rjmp	.+70     	; 0x76 <ind_dict+0x14>
  30:	24 c0       	rjmp	.+72     	; 0x7a <ind_dict+0x18>
  32:	25 c0       	rjmp	.+74     	; 0x7e <ind_dict+0x1c>
  34:	26 c0       	rjmp	.+76     	; 0x82 <ind_dict+0x20>
  36:	27 c0       	rjmp	.+78     	; 0x86 <ind_dict+0x24>
  38:	28 c0       	rjmp	.+80     	; 0x8a <ind_dict+0x28>
  3a:	29 c0       	rjmp	.+82     	; 0x8e <ind_dict+0x2c>
  3c:	2a c0       	rjmp	.+84     	; 0x92 <ind_dict+0x30>

0000003e <__ctors_end>:
  3e:	11 24       	eor	r1, r1
  40:	1f be       	out	0x3f, r1	; 63
  42:	cf ed       	ldi	r28, 0xDF	; 223
  44:	cd bf       	out	0x3d, r28	; 61
  46:	8e d0       	rcall	.+284    	; 0x164 <main>
  48:	07 c1       	rjmp	.+526    	; 0x258 <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <indicator_3461AS_init>:
void ind_print(int number);
char ind_dict(char figure);

void indicator_3461AS_init()
{
	port_cathode_dir |= (1<<seg1)|(1<<seg2)|(1<<seg3)|(1<<seg4); //Настраиваем пины катодов на выход
  4c:	81 b3       	in	r24, 0x11	; 17
  4e:	8c 63       	ori	r24, 0x3C	; 60
  50:	81 bb       	out	0x11, r24	; 17
	port_anode_dir |= (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_e)|(1<<led_f)|(1<<led_g)|(1<<led_dp); //Настраиваем пины анодов на выход
  52:	87 b3       	in	r24, 0x17	; 23
  54:	8f ef       	ldi	r24, 0xFF	; 255
  56:	87 bb       	out	0x17, r24	; 23
	port_anode &= 0b00000000;
  58:	88 b3       	in	r24, 0x18	; 24
  5a:	18 ba       	out	0x18, r1	; 24
	port_cathode &= 0b00000000;
  5c:	82 b3       	in	r24, 0x12	; 18
  5e:	12 ba       	out	0x12, r1	; 18
  60:	08 95       	ret

00000062 <ind_dict>:
	port_cathode &= 0b00000000;
}

char ind_dict(char figure)
{
	switch (figure){
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	8a 30       	cpi	r24, 0x0A	; 10
  66:	91 05       	cpc	r25, r1
  68:	b0 f4       	brcc	.+44     	; 0x96 <ind_dict+0x34>
  6a:	fc 01       	movw	r30, r24
  6c:	eb 5e       	subi	r30, 0xEB	; 235
  6e:	ff 4f       	sbci	r31, 0xFF	; 255
  70:	09 94       	ijmp
		case 0: return (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_e)|(1<<led_f);
		case 1: return (1<<led_b)|(1<<led_c);
  72:	86 e0       	ldi	r24, 0x06	; 6
  74:	08 95       	ret
		case 2: return (1<<led_a)|(1<<led_b)|(1<<led_d)|(1<<led_e)|(1<<led_g);
  76:	8b e5       	ldi	r24, 0x5B	; 91
  78:	08 95       	ret
		case 3: return (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_g);
  7a:	8f e4       	ldi	r24, 0x4F	; 79
  7c:	08 95       	ret
		case 4: return (1<<led_b)|(1<<led_c)|(1<<led_f)|(1<<led_g);
  7e:	86 e6       	ldi	r24, 0x66	; 102
  80:	08 95       	ret
		case 5: return (1<<led_a)|(1<<led_c)|(1<<led_d)|(1<<led_f)|(1<<led_g);
  82:	8d e6       	ldi	r24, 0x6D	; 109
  84:	08 95       	ret
		case 6: return (1<<led_a)|(1<<led_c)|(1<<led_d)|(1<<led_e)|(1<<led_f)|(1<<led_g);
  86:	8d e7       	ldi	r24, 0x7D	; 125
  88:	08 95       	ret
		case 7: return (1<<led_a)|(1<<led_b)|(1<<led_c);
  8a:	87 e0       	ldi	r24, 0x07	; 7
  8c:	08 95       	ret
		case 8: return (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_e)|(1<<led_f)|(1<<led_g);
  8e:	8f e7       	ldi	r24, 0x7F	; 127
  90:	08 95       	ret
		case 9: return (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_f)|(1<<led_g);
  92:	8f e6       	ldi	r24, 0x6F	; 111
  94:	08 95       	ret
		default: return 0;
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	08 95       	ret
}

char ind_dict(char figure)
{
	switch (figure){
		case 0: return (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_e)|(1<<led_f);
  9a:	8f e3       	ldi	r24, 0x3F	; 63
		case 7: return (1<<led_a)|(1<<led_b)|(1<<led_c);
		case 8: return (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_e)|(1<<led_f)|(1<<led_g);
		case 9: return (1<<led_a)|(1<<led_b)|(1<<led_c)|(1<<led_d)|(1<<led_f)|(1<<led_g);
		default: return 0;
	}
}
  9c:	08 95       	ret

0000009e <ind_print>:
	port_anode &= 0b00000000;
	port_cathode &= 0b00000000;
}

void ind_print(int number)
{
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	8c 01       	movw	r16, r24
	int fig1 = number / 1000;
	int fig2 = number / 100 % 10;
	int fig3 = number / 10 % 10;
	int fig4 = number % 10;
	
	port_anode |= ind_dict(fig1);
  a8:	68 ee       	ldi	r22, 0xE8	; 232
  aa:	73 e0       	ldi	r23, 0x03	; 3
  ac:	ae d0       	rcall	.+348    	; 0x20a <__divmodhi4>
  ae:	86 2f       	mov	r24, r22
  b0:	d8 df       	rcall	.-80     	; 0x62 <ind_dict>
  b2:	98 b3       	in	r25, 0x18	; 24
  b4:	89 2b       	or	r24, r25
  b6:	88 bb       	out	0x18, r24	; 24
	port_cathode |= (0<<seg1)|(1<<seg2)|(1<<seg3)|(1<<seg4);
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	8c 61       	ori	r24, 0x1C	; 28
  bc:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <ind_print+0x24>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <ind_print+0x2a>
  c8:	00 00       	nop
	_delay_us(pause_us);
	port_anode &= 0b00000000;
  ca:	88 b3       	in	r24, 0x18	; 24
  cc:	18 ba       	out	0x18, r1	; 24
	port_cathode &= 0b00000000;
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	12 ba       	out	0x12, r1	; 18
	port_anode |= ind_dict(fig2);
  d2:	c8 01       	movw	r24, r16
  d4:	64 e6       	ldi	r22, 0x64	; 100
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	98 d0       	rcall	.+304    	; 0x20a <__divmodhi4>
  da:	cb 01       	movw	r24, r22
  dc:	ca e0       	ldi	r28, 0x0A	; 10
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	be 01       	movw	r22, r28
  e2:	93 d0       	rcall	.+294    	; 0x20a <__divmodhi4>
  e4:	be df       	rcall	.-132    	; 0x62 <ind_dict>
  e6:	98 b3       	in	r25, 0x18	; 24
  e8:	89 2b       	or	r24, r25
  ea:	88 bb       	out	0x18, r24	; 24
	port_cathode |= (1<<seg1)|(0<<seg2)|(1<<seg3)|(1<<seg4);
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	8c 62       	ori	r24, 0x2C	; 44
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <__stack+0x17>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <__stack+0x1d>
  fc:	00 00       	nop
	_delay_us(pause_us);
	port_anode &= 0b00000000;
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	18 ba       	out	0x18, r1	; 24
	port_cathode &= 0b00000000;
 102:	82 b3       	in	r24, 0x12	; 18
 104:	12 ba       	out	0x12, r1	; 18
	port_anode |= ind_dict(fig3);
 106:	c8 01       	movw	r24, r16
 108:	be 01       	movw	r22, r28
 10a:	7f d0       	rcall	.+254    	; 0x20a <__divmodhi4>
 10c:	18 2f       	mov	r17, r24
 10e:	cb 01       	movw	r24, r22
 110:	be 01       	movw	r22, r28
 112:	7b d0       	rcall	.+246    	; 0x20a <__divmodhi4>
 114:	a6 df       	rcall	.-180    	; 0x62 <ind_dict>
 116:	98 b3       	in	r25, 0x18	; 24
 118:	89 2b       	or	r24, r25
 11a:	88 bb       	out	0x18, r24	; 24
	port_cathode |= (1<<seg1)|(1<<seg2)|(0<<seg3)|(1<<seg4);
 11c:	82 b3       	in	r24, 0x12	; 18
 11e:	84 63       	ori	r24, 0x34	; 52
 120:	82 bb       	out	0x12, r24	; 18
 122:	89 ef       	ldi	r24, 0xF9	; 249
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <__stack+0x47>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <__stack+0x4d>
 12c:	00 00       	nop
	_delay_us(pause_us);
	port_anode &= 0b00000000;
 12e:	88 b3       	in	r24, 0x18	; 24
 130:	18 ba       	out	0x18, r1	; 24
	port_cathode &= 0b00000000;
 132:	82 b3       	in	r24, 0x12	; 18
 134:	12 ba       	out	0x12, r1	; 18
	port_anode |= ind_dict(fig4);
 136:	81 2f       	mov	r24, r17
 138:	94 df       	rcall	.-216    	; 0x62 <ind_dict>
 13a:	98 b3       	in	r25, 0x18	; 24
 13c:	89 2b       	or	r24, r25
 13e:	88 bb       	out	0x18, r24	; 24
	port_cathode |= (1<<seg1)|(1<<seg2)|(1<<seg3)|(0<<seg4);
 140:	82 b3       	in	r24, 0x12	; 18
 142:	88 63       	ori	r24, 0x38	; 56
 144:	82 bb       	out	0x12, r24	; 18
 146:	89 ef       	ldi	r24, 0xF9	; 249
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <__stack+0x6b>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <__stack+0x71>
 150:	00 00       	nop
	_delay_us(pause_us);
	port_anode &= 0b00000000;
 152:	88 b3       	in	r24, 0x18	; 24
 154:	18 ba       	out	0x18, r1	; 24
	port_cathode &= 0b00000000;
 156:	82 b3       	in	r24, 0x12	; 18
 158:	12 ba       	out	0x12, r1	; 18
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <main>:


int main(void)
{
    /* Replace with your application code */
	indicator_3461AS_init();
 164:	73 df       	rcall	.-282    	; 0x4c <indicator_3461AS_init>
	DDRD |= (0<<s1)|(0<<s2);
 166:	81 b3       	in	r24, 0x11	; 17
 168:	81 bb       	out	0x11, r24	; 17
	DDRA |= (0<<btn);
 16a:	8a b3       	in	r24, 0x1a	; 26
 16c:	8a bb       	out	0x1a, r24	; 26
	int value = 0;
	int last_state = 0;
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
{
    /* Replace with your application code */
	indicator_3461AS_init();
	DDRD |= (0<<s1)|(0<<s2);
	DDRA |= (0<<btn);
	int value = 0;
 172:	00 e0       	ldi	r16, 0x00	; 0
 174:	10 e0       	ldi	r17, 0x00	; 0
 176:	01 c0       	rjmp	.+2      	; 0x17a <main+0x16>
 178:	ce 01       	movw	r24, r28
	int last_state = 0;
    while (1) 
    {
		int new_state = port_enc_pin & 0b00000011;
 17a:	c0 b3       	in	r28, 0x10	; 16
 17c:	c3 70       	andi	r28, 0x03	; 3
 17e:	d0 e0       	ldi	r29, 0x00	; 0
		switch(last_state)
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	91 05       	cpc	r25, r1
 184:	09 f1       	breq	.+66     	; 0x1c8 <main+0x64>
 186:	1c f4       	brge	.+6      	; 0x18e <main+0x2a>
 188:	89 2b       	or	r24, r25
 18a:	91 f0       	breq	.+36     	; 0x1b0 <main+0x4c>
 18c:	33 c0       	rjmp	.+102    	; 0x1f4 <main+0x90>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	91 05       	cpc	r25, r1
 192:	19 f0       	breq	.+6      	; 0x19a <main+0x36>
 194:	03 97       	sbiw	r24, 0x03	; 3
 196:	19 f1       	breq	.+70     	; 0x1de <main+0x7a>
 198:	2d c0       	rjmp	.+90     	; 0x1f4 <main+0x90>
		{
		case 2:
			{
			if(new_state == 3) value++;
 19a:	c3 30       	cpi	r28, 0x03	; 3
 19c:	d1 05       	cpc	r29, r1
 19e:	19 f4       	brne	.+6      	; 0x1a6 <main+0x42>
 1a0:	0f 5f       	subi	r16, 0xFF	; 255
 1a2:	1f 4f       	sbci	r17, 0xFF	; 255
 1a4:	27 c0       	rjmp	.+78     	; 0x1f4 <main+0x90>
			if(new_state == 0) value--; 
 1a6:	20 97       	sbiw	r28, 0x00	; 0
 1a8:	29 f5       	brne	.+74     	; 0x1f4 <main+0x90>
 1aa:	01 50       	subi	r16, 0x01	; 1
 1ac:	11 09       	sbc	r17, r1
 1ae:	22 c0       	rjmp	.+68     	; 0x1f4 <main+0x90>
			break;
			}
 
		case 0:
			{
			if(new_state == 2) value++;
 1b0:	c2 30       	cpi	r28, 0x02	; 2
 1b2:	d1 05       	cpc	r29, r1
 1b4:	19 f4       	brne	.+6      	; 0x1bc <main+0x58>
 1b6:	0f 5f       	subi	r16, 0xFF	; 255
 1b8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ba:	1c c0       	rjmp	.+56     	; 0x1f4 <main+0x90>
			if(new_state == 1) value--; 
 1bc:	c1 30       	cpi	r28, 0x01	; 1
 1be:	d1 05       	cpc	r29, r1
 1c0:	c9 f4       	brne	.+50     	; 0x1f4 <main+0x90>
 1c2:	01 50       	subi	r16, 0x01	; 1
 1c4:	11 09       	sbc	r17, r1
 1c6:	16 c0       	rjmp	.+44     	; 0x1f4 <main+0x90>
			break;
			}
		case 1:
			{
			if(new_state == 0) value++;
 1c8:	20 97       	sbiw	r28, 0x00	; 0
 1ca:	19 f4       	brne	.+6      	; 0x1d2 <main+0x6e>
 1cc:	0f 5f       	subi	r16, 0xFF	; 255
 1ce:	1f 4f       	sbci	r17, 0xFF	; 255
 1d0:	11 c0       	rjmp	.+34     	; 0x1f4 <main+0x90>
			if(new_state == 3) value--; 
 1d2:	c3 30       	cpi	r28, 0x03	; 3
 1d4:	d1 05       	cpc	r29, r1
 1d6:	71 f4       	brne	.+28     	; 0x1f4 <main+0x90>
 1d8:	01 50       	subi	r16, 0x01	; 1
 1da:	11 09       	sbc	r17, r1
 1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <main+0x90>
			break;
			}
		case 3:
			{
			if(new_state == 1) value++;
 1de:	c1 30       	cpi	r28, 0x01	; 1
 1e0:	d1 05       	cpc	r29, r1
 1e2:	19 f4       	brne	.+6      	; 0x1ea <main+0x86>
 1e4:	0f 5f       	subi	r16, 0xFF	; 255
 1e6:	1f 4f       	sbci	r17, 0xFF	; 255
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <main+0x90>
			if(new_state == 2) value--; 
 1ea:	c2 30       	cpi	r28, 0x02	; 2
 1ec:	d1 05       	cpc	r29, r1
 1ee:	11 f4       	brne	.+4      	; 0x1f4 <main+0x90>
 1f0:	01 50       	subi	r16, 0x01	; 1
 1f2:	11 09       	sbc	r17, r1
			break;
			}
		}
		last_state = new_state;
		if(value<0){
 1f4:	11 23       	and	r17, r17
 1f6:	34 f4       	brge	.+12     	; 0x204 <main+0xa0>
			ind_print(-value);
 1f8:	88 27       	eor	r24, r24
 1fa:	99 27       	eor	r25, r25
 1fc:	80 1b       	sub	r24, r16
 1fe:	91 0b       	sbc	r25, r17
 200:	4e df       	rcall	.-356    	; 0x9e <ind_print>
 202:	ba cf       	rjmp	.-140    	; 0x178 <main+0x14>
		}
		else 
			ind_print(value);
 204:	c8 01       	movw	r24, r16
 206:	4b df       	rcall	.-362    	; 0x9e <ind_print>
 208:	b7 cf       	rjmp	.-146    	; 0x178 <main+0x14>

0000020a <__divmodhi4>:
 20a:	97 fb       	bst	r25, 7
 20c:	07 2e       	mov	r0, r23
 20e:	16 f4       	brtc	.+4      	; 0x214 <__divmodhi4+0xa>
 210:	00 94       	com	r0
 212:	06 d0       	rcall	.+12     	; 0x220 <__divmodhi4_neg1>
 214:	77 fd       	sbrc	r23, 7
 216:	08 d0       	rcall	.+16     	; 0x228 <__divmodhi4_neg2>
 218:	0b d0       	rcall	.+22     	; 0x230 <__udivmodhi4>
 21a:	07 fc       	sbrc	r0, 7
 21c:	05 d0       	rcall	.+10     	; 0x228 <__divmodhi4_neg2>
 21e:	3e f4       	brtc	.+14     	; 0x22e <__divmodhi4_exit>

00000220 <__divmodhi4_neg1>:
 220:	90 95       	com	r25
 222:	81 95       	neg	r24
 224:	9f 4f       	sbci	r25, 0xFF	; 255
 226:	08 95       	ret

00000228 <__divmodhi4_neg2>:
 228:	70 95       	com	r23
 22a:	61 95       	neg	r22
 22c:	7f 4f       	sbci	r23, 0xFF	; 255

0000022e <__divmodhi4_exit>:
 22e:	08 95       	ret

00000230 <__udivmodhi4>:
 230:	aa 1b       	sub	r26, r26
 232:	bb 1b       	sub	r27, r27
 234:	51 e1       	ldi	r21, 0x11	; 17
 236:	07 c0       	rjmp	.+14     	; 0x246 <__udivmodhi4_ep>

00000238 <__udivmodhi4_loop>:
 238:	aa 1f       	adc	r26, r26
 23a:	bb 1f       	adc	r27, r27
 23c:	a6 17       	cp	r26, r22
 23e:	b7 07       	cpc	r27, r23
 240:	10 f0       	brcs	.+4      	; 0x246 <__udivmodhi4_ep>
 242:	a6 1b       	sub	r26, r22
 244:	b7 0b       	sbc	r27, r23

00000246 <__udivmodhi4_ep>:
 246:	88 1f       	adc	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	5a 95       	dec	r21
 24c:	a9 f7       	brne	.-22     	; 0x238 <__udivmodhi4_loop>
 24e:	80 95       	com	r24
 250:	90 95       	com	r25
 252:	bc 01       	movw	r22, r24
 254:	cd 01       	movw	r24, r26
 256:	08 95       	ret

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
